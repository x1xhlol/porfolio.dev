---
import SunIcon from "./icons/Sun.astro"
import MoonIcon from "./icons/Moon.astro"

// Default theme set to dark
const THEMES = ["Light", "Dark"]
---

<div class="relative ml-1 mr-1">
  <button
    transition:persist
    id="theme-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition"
  >
    <span class="sr-only">Elige el tema</span>
    <SunIcon id="light" class="theme-toggle-icon size-5 transition-all" />
    <MoonIcon
      id="dark"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
  </button>
  <div
    transition:persist
    id="themes-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        THEMES.map((theme) => (
          <li class="themes-menu-option px-2 py-1.5 cursor-pointer hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm">
            {theme}
          </li>
        ))
      }
    </ul>
  </div>

  <!-- Pop-up Notification -->
  <div id="popup" class="popup hidden">
    <div class="popup-content p-6 bg-gray-700 text-white rounded-lg shadow-lg">
      <p class="text-lg">Â¡No! El modo Sol (Light) es un desastre ðŸ˜‚</p>
      <button id="popup-close" class="mt-4 px-4 py-2 bg-blue-500 text-white rounded-md">Ok</button>
    </div>
  </div>
</div>

<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }

  /* Pop-up Styling */
  .popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 9999; /* Ensures the popup is above the content */
    animation: fadeIn 0.3s ease-out;
  }

  .popup-content {
    max-width: 400px;
    width: 80%;
    text-align: center;
    padding: 20px;
    background-color: #333; /* Dark background to make the text visible */
    border-radius: 8px;
    animation: pop-up 0.3s ease-out;
    box-shadow: 0px 5px 15px rgba(0, 0, 0, 0.3); /* Adds shadow to the popup */
  }

  .popup.hidden {
    display: none;
  }

  .popup.visible {
    display: flex;
  }

  @keyframes fadeIn {
    0% {
      opacity: 0;
    }
    100% {
      opacity: 1;
    }
  }

  @keyframes pop-up {
    0% {
      transform: scale(0.8);
      opacity: 0;
    }
    100% {
      transform: scale(1);
      opacity: 1;
    }
  }

  /* Adding a slight blur effect to the background */
  body.blur {
    filter: blur(4px);
  }

  /* Adjusting transition for better performance */
  .transition-all {
    transition: all 0.3s ease;
  }
</style>

<script is:inline>
  let remove = null
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)")
  const themesMenu = document.getElementById("themes-menu")
  const popup = document.getElementById("popup")
  const popupClose = document.getElementById("popup-close")

  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("theme") ?? "dark"
    }

    return matchMedia.matches ? "dark" : "light"
  }

  const updateIcon = (themePreference) => {
    document.querySelectorAll(".theme-toggle-icon").forEach((element) => {
      element.style.scale = element.id === themePreference ? "1" : "0"
    })
  }

  const updateTheme = () => {
    if (remove != null) {
      remove()
    }
    matchMedia.addEventListener("change", updateTheme)
    remove = () => {
      matchMedia.removeEventListener("change", updateTheme)
    }

    const themePreference = getThemePreference()
    const isDark =
      themePreference === "dark" ||
      (themePreference === "system" && matchMedia.matches)

    updateIcon(themePreference)

    document.documentElement.classList[isDark ? "add" : "remove"]("dark")
  }

  updateTheme()

  document.addEventListener("click", () => themesMenu.classList.remove("open"))

  document.getElementById("theme-toggle-btn").addEventListener("click", (e) => {
    e.stopPropagation()
    const isClosed = !themesMenu.classList.contains("open")
    themesMenu.classList[isClosed ? "add" : "remove"]("open")
  })

  document.querySelectorAll(".themes-menu-option").forEach((element) => {
    element.addEventListener("click", (e) => {
      const selectedTheme = e.target.innerText.toLowerCase().trim()
      if (selectedTheme === "light") {
        // Display the "No" pop-up when selecting Light mode
        popup.classList.remove("hidden")
        popup.classList.add("visible")
        document.body.classList.add("blur") // Add blur effect to the background
      } else {
        localStorage.setItem("theme", selectedTheme)
        updateTheme()
      }
    })
  })

  popupClose.addEventListener("click", () => {
    popup.classList.remove("visible")
    popup.classList.add("hidden")
    document.body.classList.remove("blur") // Remove blur effect when the pop-up is closed
  })

  document.addEventListener('astro:after-swap', () => {
    updateTheme();
    window.scrollTo({ left: 0, top: 0, behavior: 'instant' });
  })
</script>
