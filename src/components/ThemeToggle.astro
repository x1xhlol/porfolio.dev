---
import SunIcon from "./icons/Sun.astro"
import MoonIcon from "./icons/Moon.astro"
import SystemIcon from "./icons/System.astro"

const THEMES = ["Light", "Dark", "System"]
let currentTheme = getThemePreference(); // Get initial theme from localStorage or system preference
---

<div class="relative ml-1 mr-1">
  <button
    transition:persist
    id="theme-toggle-btn"
    class="appearance-none border-none flex hover:scale-125 transition"
  >
    <span class="sr-only">Elige el tema</span>
    <!-- Conditional Rendering based on Theme -->
    {currentTheme === "light" ? (
      <div class="no-theme-rectangle">No.</div> // Fun "No" animation when Light is selected
    ) : (
      <SunIcon id="light" class="theme-toggle-icon size-5 transition-all" />
    )}
    <MoonIcon
      id="dark"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
    <SystemIcon
      id="system"
      class="theme-toggle-icon absolute size-5 transition-all"
    />
  </button>
  <div
    transition:persist
    id="themes-menu"
    class="absolute hidden scale-80 top-8 right-0 text-sm p-1 min-w-[8rem] rounded-md border border-gray-100 bg-white/90 dark:bg-gray-900/90 dark:border-gray-500/20 shadow-[0_3px_10px_rgb(0,0,0,0.2)] backdrop-blur-md"
  >
    <ul>
      {
        THEMES.map((theme) => (
          <li class="themes-menu-option px-2 py-1.5 cursor-default hover:bg-neutral-400/40 dark:hover:bg-gray-500/50 rounded-sm">
            {theme}
          </li>
        ))
      }
    </ul>
    <!-- OK Button to go to the main page (only when "No" is shown) -->
    <button id="ok-btn" class="ok-button px-4 py-2 mt-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-all hidden">
      OK
    </button>
  </div>
</div>

<style>
  #themes-menu.open {
    display: inline;
    animation: scale-up-center 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up-center {
    from {
      transform: scale(0.8);
      opacity: 0;
    }

    to {
      transform: scale(1);
      opacity: 1;
    }
  }

  /* Animation for "No" when sun is selected */
  .no-theme-rectangle {
    width: 50px;
    height: 50px;
    background-color: #ffcc00; /* Sun-like color */
    color: #000;
    font-weight: bold;
    text-align: center;
    line-height: 50px;
    border-radius: 8px;
    animation: shake 1s ease-in-out infinite, showText 1s forwards;
    font-size: 1.25rem;
  }

  /* Animation to shake the rectangle */
  @keyframes shake {
    0% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    50% { transform: translateX(5px); }
    75% { transform: translateX(-5px); }
    100% { transform: translateX(0); }
  }

  /* Animation for showing text */
  @keyframes showText {
    0% {
      opacity: 0;
      transform: scale(0.5);
    }
    100% {
      opacity: 1;
      transform: scale(1);
    }
  }

  /* OK Button Style */
  .ok-button {
    width: 100%;
    font-size: 1rem;
    font-weight: bold;
    transition: background-color 0.3s ease;
  }

  .ok-button:hover {
    background-color: #4a90e2;
  }
</style>

<script is:inline>
  let remove = null
  const matchMedia = window.matchMedia("(prefers-color-scheme: dark)")
  const themesMenu = document.getElementById("themes-menu")
  const okButton = document.getElementById("ok-btn")

  // Define getThemePreference function
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined") {
      return localStorage.getItem("theme") ?? "system"
    }

    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light"
  }

  const updateIcon = (themePreference) => {
    document.querySelectorAll(".theme-toggle-icon").forEach((element) => {
      element.style.scale = element.id === themePreference ? "1" : "0"
    })
  }

  const updateTheme = () => {
    if (remove != null) {
      remove()
    }
    matchMedia.addEventListener("change", updateTheme)
    remove = () => {
      matchMedia.removeEventListener("change", updateTheme)
    }

    const themePreference = getThemePreference()
    const isDark =
      themePreference === "dark" ||
      (themePreference === "system" && matchMedia.matches)

    updateIcon(themePreference)
    document.documentElement.classList[isDark ? "add" : "remove"]("dark")

    // Update the current theme variable when theme changes
    currentTheme = themePreference;

    // Display OK button only when "No" is shown (i.e. when Light theme is selected)
    if (currentTheme === "light") {
      okButton.classList.remove("hidden");
    } else {
      okButton.classList.add("hidden");
    }
  }

  updateTheme()

  document.addEventListener("click", () => themesMenu.classList.remove("open"))

  document.getElementById("theme-toggle-btn").addEventListener("click", (e) => {
    e.stopPropagation()
    const isClosed = !themesMenu.classList.contains("open")
    themesMenu.classList[isClosed ? "add" : "remove"]("open")
  })

  // Handle the OK button click event
  okButton.addEventListener("click", () => {
    // Redirect to the main page (replace with actual redirection logic)
    window.location.href = "/"; // or use routing logic if in a SPA
  })
</script>
